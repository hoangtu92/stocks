<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Log;

class StockOrder extends Model
{
    //
    protected $table = 'stock_orders';
    protected $primaryKey = 'id';
    public $incrementing = true;
    public $timestamps = true;
    public $fillable = [
        "id",
        "code",
        "qty",
        "buy",
        "sell",
        "date",
        "tlong",
        "tlong2",
        "deal_type",
        "order_type",
        "closed",
        "created_at",
        "modified_at"
    ];



    const BUY = "1";
    const SELL = "0";
    const SHORT_SELL = "0";
    const BUY_LONG = "1";
    const DL0 = "dl0";
    const DL1 = "dl1";
    const DL2 = "dl2";

    protected static function booted()
    {
        parent::booted(); // TODO: Change the autogenerated stub

        static::created(function ($stock_order){
            Log::info("Order created {$stock_order->id} - {$stock_order->code}");
            $crawler = new Crawler\Crawler();

            if($stock_order->order_type == StockOrder::DL0){
                $stock = Dl::where("code", $stock_order->code)
                    ->where("date", $stock_order->date)
                    ->orWhere("date", $crawler->previousDay($stock_order->date))
                    ->orWhere("date", $crawler->previousDay($crawler->previousDay($stock_order->date)))
                    ->first();
            }
            else $stock = Dl::where("code", $stock_order->code)->where("date", $stock_order->date)->first();

            if(!$stock){
                Log::debug("Stock not found on {$stock_order->date} {$stock_order->code}");
            }
            else{
                if($stock_order->type == self::BUY)
                    $crawler->buy($stock);

                else if($stock_order->type == self::SELL)
                    $crawler->sell($stock);
            }

        });

        /*static::saved(function ($stock_order){
            Log::info("Order saved {$stock_order->code}");
        });*/
    }

    public function getProfitAttribute(){
        $fee = 0;//round( $this->sell * 1.425 );
        $tax = 0;//round( $this->sell * 1.5 );
        return $this->buy > 0 ? ($this->sell - $this->buy)*1000 - $tax - $fee : 0;
    }


    public function getProfitPercentAttribute(){
        return $this->buy > 0 ? ($this->profit/($this->buy*1000))*100 : 0;
    }


}
